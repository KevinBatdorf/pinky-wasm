func mandelbrot(cx, cy)
    x := 0
    y := 0
    iter := 0
    max := 16
    while x*x + y*y <= 4 and iter < max do
        xtemp := x*x - y*y + cx
        y := 2 * x * y + cy
        x := xtemp
        iter := iter + 1
    end
    ret iter
end

height := 16
width := 22
yi := 0
while yi < height do
    y0 := (yi / height) * 2.0 - 1.0
    xi := 0
    while xi < width do
        x0 := (xi / width) * 3.5 - 2.5
        m := mandelbrot(x0, y0)
        if m == 16 then
            print "âš¡"
        else
            print " "
        end
        xi := xi + 1
    end
    println ""
    yi := yi + 1
end

println "\n== Literals and Operators =="
print "hello " + "world"
print 5 + 3
print 10 - 2
print 4 * 2
print 8 / 2
print 3 % 2
print 2 ^ 3

println "\n\n== Booleans =="
print true
print false
println true and false
println false or true
println true and 7
println false or "ok"
println 1 or 2
println "x" and "y" and "z"

println "\n== Comparisons =="
print 1 == 1
print 1 ~= 2
print 3 < 5
print 5 > 3
print 3 <= 3
println 1 >= 4

println "\n== Variables and Scope =="
x := 5
    println x
if true then
    local x := 10
    println x
end
println x

println "\n== Control Flow: if, elif, else =="
if x == 5 then
    println "five"
elif x == 6 then
    println "six"
else
    println "other"
end

println "\n== While Loops =="
i := 0
while i < 3 do
    print i
    i := i + 1
end

println "\n\n== For Loops =="
for j := 5, 1, -2 do
    print j
end

println "\n\n== Functions =="
func greet()
    println "hi"
end
greet()

func add(a, b)
    ret a + b
    end
println add(7, 8)

func square(n)
    ret n * n
end
println square(4)

func fact(n)
    if n <= 1 then
        ret 1
    else
        ret n * fact(n - 1)
    end
end
println fact(5)

println "\n== Function Return as Value =="
x := add(3, 4)
println x
println "val: " + add(1, 2)

println "\n== Return in Branches =="
func check(flag)
    if flag then
        ret "yes"
    else
        ret "no"
    end
end
println check(true)
println check(false)

println "\n== String Concatenation =="
println "Score: " + 10
println 10 + "%"
println "ok: " + true
println "Result: " + (2 + 3) + " done"

println "\n== Nil and Falsy Return =="
func maybe(flag)
    if flag then
        ret 1
    end
end
println maybe(false) -- empty line
if maybe(false) then
    print "bad"
else
    print "fallback"
end

println "\n\n== Scoping and Shadowing =="
msg := "outer"
if true then
    local msg := "inner"
    println msg
end
println msg

println "\n== Loop Scoping =="
x := 1
y := 0
while x < 4 do
    local y := 2
    println y
    x := x + 1
end
println y -- 0

println "\n== Short-circuit Logic =="
println true and false
println false or true
println true or false

println "\n== Coercion =="
print 1 + true
print true + false
print false + 1
